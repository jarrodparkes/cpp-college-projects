A binary search tree is an appropriate structure for many of the same applications discussed previously in conjunction with other sorted list structures.  The special advantage of using a binary search tree is that it facilitates searching, while conferring the benefits of linking the elements.  It provides the best features of both the sorted array-based list and the linked list.  Like a sorted array-based list, it can search quickly, using a binary search tree.  Like a linked list, it allows insertions and deletions without having to move data.  Thus this structure is particularly suitable for applications in which search time must be minimized or in which the nodes are not necessarily processed in sequential order.  As usual, a tradeoff exists.  The binary search tree, with its extra pointer in each node, takes up more memory space than a singly linked list does.  In addition, the algorithms for manipulating the tree are somewhat more complicated.  If all of the list's uses involve sequential rather than random processing of the elements, the tree may not be as a good a choice as a linked list.  Suppose we have 100,000 customer records in a list.  If our main activity is to send out updated monthly statements to the customers and if the order in which the statements are printed matches the order in which the records appear on the list, a linked list would be suitable.  But suppose we decide to keep a terminal available to give out account information to the customers whenever they ask.  If the data are kept in a linked list, the first customer on the list can be given information almost instantly, but the last customer has to wait while the application examines the other 99,999 records.  When a direct access to the records is a requirement, a binary search tree represents a more appropriate structure.