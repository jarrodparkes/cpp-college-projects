A binary search tree is a structure with two properties: a shape property and a property that relates the keys of the elements in the structure.  We look first at the shape property.  Each node in a singly linked list may point to one other node: the one that follows it.  Thus a singly linked list is a linear structure; each node in the list (except the last) has a unique successor.  In contrast, a binary tree is a structure in which each node is capable of having two successor nodes, called children.  Each of the children, being nodes in the binary tree, can also have two child nodes, and these children can also have two children, and so on, giving the tree its branching structure.  The "beginning" of the tree is a unique starting node called the root.  Figure 8.1 depicts a binary tree.  The root node of this binary tree contains the value A.  Each node in the tree may have 0, 1, or 2 children.  The node to the left of a node, if it exists, is called its left child.  For instance, the left child of the root node contains the value B. The node to the right of a node, if it exists, is its right child.  The right child of the root node contains the value C.  The root node is the parent of the nodes containing B and C.  (Earlier textbooks used the terms left son, right son, and father to describe these relationships.)  If a node in the tree has no children, it is called a leaf.  For instance, the nodes containing G, H, E, I, and J are leaf nodes.  In addition to specifying that a node may have as many as two children, the definition of a binary tree states that a unique path exists from the root to every other node.  Thus every node (except the root) has a unique parent.  In the structure pictured at the top of the next page, the nodes have the correct number of children, but the unique path rule is violated: Two paths from the root to the node containing D exists.  Therefore this structure is not a tree at all, let alone a binary tree.  In Figure 8.1, each of the root node's children is itself the root of a smaller binary tree, or subtree.  The root node's left child, containing B, is the root of its left subtree, and the right child, containing C, is the root of its right subtree.  In fact, any node in the tree can be considered the root node of a subtree.  The subtree whose root node has the value B also includes the nodes with the values D, G, H, and E.  These nodes are the descendants of the node containing B.  The descendants of the node containing C are the nodes with the values F, I, and J.  A node is the ancestor of another node if it is the parent of the node, or the parent of some other ancestor of that node.  (Yes, this is a recursive function definition.)  In Figure 8.1, the ancestors of the node with the value G are the nodes containing D, B, and A.  Obviously, the root of the tree is the ancestor of every other node in the tree.
